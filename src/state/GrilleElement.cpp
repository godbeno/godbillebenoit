#include "GrilleElement.h"
#include <iostream>
using namespace state;

GrilleElement::GrilleElement(Etat* e) : ListeElement(e)
{
    hauteur = 0;
    largeur = 0;
}
int const GrilleElement::getHauteur ()
{
    return hauteur;
}

int const GrilleElement::getLargeur ()
{
    return largeur;
}

Personnage* const GrilleElement::getCellulePersonnage (int i, int j)
{
    for(unsigned int k=0;k<elements.size();k++){
        if(this->elements[k]->getX() == i && this->elements[k]->getY() == j && this->elements[k]->estPersonnage())
            return static_cast<Personnage*>(this->elements[k]);
    }
    return nullptr;
}

CaseTerrain* const GrilleElement::getCelluleDecor (int i, int j)
{
    for(unsigned int k=0;k<elements.size();k++){
        if(this->elements[k]->getX() == i && this->elements[k]->getY() == j && not(this->elements[k]->estPersonnage()))
            return static_cast<CaseTerrain*>(this->elements[k]);
    }
    return nullptr;
}



void GrilleElement::genererTerrainAleatoire(bool estChateau)
{   int tabchateau[24*24]= {
  0 ,0 ,00,02,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,02,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,02,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,02,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,02,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,02,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,07,07,07,07,07,07,07,07,07,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,07,30,32,29,20,29,32,31,07,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,07,27,36,07,07,07,36,27,07,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,07,27,07,07,07,07,07,27,07,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,07,21,07,07,07,07,07,21,07,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,07,27,07,07,07,07,07,27,07,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,07,27,37,07,07,07,37,27,07,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,07,28,34,29,20,29,34,26,07,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,07,07,07,07,07,07,07,07,07,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
  00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 };

int tab[24*24]={0,0,0,0,0,18,14,14,14,19,0,0,0,0,0,0,0,0,0,7,7,7,7,7,
0,0,0,0,0,0,13,11,11,11,15,0,0,0,0,0,0,0,0,7,7,7,7,7,
0,0,0,0,0,0,43,11,11,11,42,0,0,0,0,0,0,0,0,7,7,7,7,7,
0,0,0,0,0,0,13,11,11,11,15,0,0,0,0,0,0,0,0,7,7,7,7,7,
0,0,0,0,0,0,16,12,12,12,17,0,0,0,0,0,0,0,0,7,7,7,7,7,
1,8,1,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,2,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,
0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,3,1,8,1,1,1,1,1,6,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,
0,0,10,0,0,0,0,0,0,0,5,1,1,4,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,10,0,0,0,0,0,2,0,0,0,0,0,0,0,10,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,6,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,
7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,
7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,
7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,9,0,10,0,0,0,0,0,
7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,
7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0};





    for (int i = 0; i < 24; i++)
    {
        for (int j = 0; j < 24; j++)
        {   if(estChateau){
            elements.push_back(new CaseTerrain(tabchateau[j*24+i]));}
        else{ elements.push_back(new CaseTerrain(tab[j*24+i]));}
            elements[i*24+j]->setX(i);
            elements[i*24+j]->setY(j);
        }
    }
}
void GrilleElement::deplacerElement(Personnage* p, int i, int j)
{
    for (unsigned int k = 0; k < elements.size(); k++)
    {
        if (dynamic_cast<Personnage*>(elements[k]))
        {
            if (static_cast<Personnage*>(elements[k])->equals(*p))
            {
                elements[k]->setX(i);
                elements[k]->setY(j);
            }
        }
    }
}